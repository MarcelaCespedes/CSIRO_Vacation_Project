y <- dnorm(x,m1,sd1)
y2 <- dnorm(x,m2,sd2)
hippoframe <- data.frame(x,y,y2)
Hippo_intersect <-intersect(m1, sd1, m2, sd2)
hippocampus_threshold <- Hippo_intersect[2]
ops <- list(hippocampus_threshold = hippocampus_threshold,
hippoframe = hippoframe)
return(ops)
}
x <- HippoFunction(dat = simulated.data)
hippo_cutoff <- x$hippocampus_threshold
hippoframe <- x$hippoframe
runApp()
runApp()
runApp()
runApp()
simulated.data$Burnham_class
unique(simulated.data$Burnham_class)
simulated.data$Burnham_class[1]
unique(simulated.data$Burnham_class[1])
# this is the user interface file - starting with a very basic layout
## Load Libraries
library(shiny)
library(reshape2)
library(dplyr)
library(ggplot2)
library(visdat)
library(plotly)
library(shinydashboard)
library(shinyWidgets)
library(shinyjs)
library(shinyalert)
library(shinycssloaders)
library(data.table)
library(gridExtra)
library(networkD3)
library(shinydashboard) # for dashboard related functions and features
library(shinyBS)
library(htmlTable)
library(htmlwidgets)
library(shinymanager)
library(shinydisconnect)
load("simulated_data.RData")
LEGEND_1 <- list(
title = list(text = "<b>ATN Burnham Classification</b>"),
font = list(
family = "sans-serif",
size = 12,
color = "#000"),
bgcolor = "#E2E2E2",
bordercolor = "black",
borderwidth = 1.25,
x = 1,
y = 0.5)
LEGEND_2 <- list(
title = list(text = "<b>ATN Clifford Classification</b>"),
font = list(
family = "sans-serif",
size = 12,
color = "#000"),
bgcolor = "#E2E2E2",
bordercolor = "black",
borderwidth = 1.25,
x = 1,
y = 0.5)
################# GROUP 1 LABELS ###############
axx <- list(
title = "CSF AB1-42 pg/mL"
)
axy <- list(
title = "CSF p-Tau pg/mL"
)
axz <- list(
title = "CSF t-Tau pg/mL"
)
################# GROUP 2 LABELS ###############
axx2 <- list(
title = "Hippocampus mL<sup>3</sup>"
)
axy2 <- list(
title = "CSF p-Tau pg/mL"
)
axz2 <- list(
title = "Centiloid"
)
CubeVisualisation<- function(dat, xinput,yinput,zinput,cols,leg,xax,yax,zax,
XCUT,YCUT,ZCUT){
df7 <- mutate(dat, scat_col = ifelse(yinput >YCUT & zinput > ZCUT & xinput <XCUT & Burnham_class == "AD",
"selected - AD",
ifelse(yinput >YCUT & zinput >ZCUT & xinput < XCUT & Burnham_class == "Pathological Change",
"selected - Pathological Change",
ifelse(yinput >YCUT & zinput > ZCUT & xinput < XCUT & Burnham_class == "Non-AD pathological Change",
"selected - Non-AD pathological Change",
ifelse(yinput >YCUT & zinput > ZCUT & xinput < XCUT & Burnham_class == "Normal AD Biomarkers",
"selected - Normal AD Biomarker","unselected")))))
df7$scat_col <- factor(df7$scat_col, levels = c("unselected", "selected - AD",
"selected - Pathological Change",
"selected - Non-AD pathological Change",
"selected - Normal AD Biomarker"))
df_mesh_1 <- data.frame(X_VAL = c(XCUT,  XCUT,  min(df7$xinput),    min(df7$xinput),
XCUT,   XCUT,   min(df7$xinput),   min(df7$xinput)),
Y_VAL = c(YCUT,max(df7$yinput),    YCUT,  max(df7$yinput),
YCUT, max(df7$yinput),   YCUT, max(df7$yinput)),
Z_VAL = c(ZCUT, ZCUT, ZCUT, ZCUT, max(df7$zinput),
max(df7$zinput),  max(df7$zinput),  max(df7$zinput)),
MESH_COL = factor(rep("CUBE", 8), levels = c("CUBE")))
# Make apoe4 a factor
df7$apoe4 <- factor(df7$apoe4, levels = c(1,0))
plot_produced <- plot_ly()%>%
add_markers(type = "scatter3d",
mode = "markers",
data = df7,
x = ~xinput,
y = ~yinput,
z = ~zinput,
color = ~scat_col,
colors = c('gray', "firebrick", "darkorange", "gold", "forestgreen")) %>%
add_trace(type = 'mesh3d',
data = df_mesh_1,
x = ~X_VAL,
y = ~Y_VAL,
z = ~Z_VAL,
i = c(7, 1,  6, 0, 4, 0, 3, 6, 0, 3, 4,7),
j = c(3, 5,  4, 2, 0, 1, 6, 3, 1, 2, 5,6),
k = c(1, 7, 0, 6, 5, 5, 7, 2, 3, 0, 7, 4),
facecolor = rep("blue", 12),
opacity = 0.1,
name = "A+/T+/N+ Positive Area",
showlegend = T) %>%
layout(legend = LEGEND_1,
scene = list(xaxis = xax, yaxis = yax, zaxis = zax))
plot_produced
}
CubeVisualisation(dat = simulated.data,
xinput = simulated.data$CSF.AB42.INNO,
yinput = simulated.data$CSF.pTau.INNO,
zinput = simulated.data$CSF.tTau.INNO,
cols = simulated.data$Burnham_class,
leg = LEGEND_1,
xax = axx,
yax = axy,
zax = axz,
XCUT = 656,
YCUT = 86,
ZCUT = 303.65)
x <- CubeVisualisation(dat = simulated.data,
xinput = simulated.data$CSF.AB42.INNO,
yinput = simulated.data$CSF.pTau.INNO,
zinput = simulated.data$CSF.tTau.INNO,
cols = simulated.data$Burnham_class,
leg = LEGEND_1,
xax = axx,
yax = axy,
zax = axz,
XCUT = 656,
YCUT = 86,
ZCUT = 303.65)
View(x)
x
CubeVisualisation<- function(dat, xinput,yinput,zinput,cols,leg,xax,yax,zax,
XCUT,YCUT,ZCUT){
df7 <- mutate(dat, scat_col = ifelse(yinput >YCUT & zinput > ZCUT & xinput <XCUT & Burnham_class == "AD",
"selected - AD",
ifelse(yinput >YCUT & zinput >ZCUT & xinput < XCUT & Burnham_class == "Pathological Change",
"selected - Pathological Change",
ifelse(yinput >YCUT & zinput > ZCUT & xinput < XCUT & Burnham_class == "Non-AD pathological Change",
"selected - Non-AD pathological Change",
ifelse(yinput >YCUT & zinput > ZCUT & xinput < XCUT & Burnham_class == "Normal AD Biomarkers",
"selected - Normal AD Biomarker","unselected")))))
df7$scat_col <- factor(df7$scat_col, levels = c("unselected", "selected - AD",
"selected - Pathological Change",
"selected - Non-AD pathological Change",
"selected - Normal AD Biomarker"))
df_mesh_1 <- data.frame(X_VAL = c(XCUT,  XCUT,  min(df7$xinput),    min(df7$xinput),
XCUT,   XCUT,   min(df7$xinput),   min(df7$xinput)),
Y_VAL = c(YCUT,max(df7$yinput),    YCUT,  max(df7$yinput),
YCUT, max(df7$yinput),   YCUT, max(df7$yinput)),
Z_VAL = c(ZCUT, ZCUT, ZCUT, ZCUT, max(df7$zinput),
max(df7$zinput),  max(df7$zinput),  max(df7$zinput)),
MESH_COL = factor(rep("CUBE", 8), levels = c("CUBE")))
plot_produced <- plot_ly()%>%
add_markers(type = "scatter3d",
mode = "markers",
data = df7,
x = ~xinput,
y = ~yinput,
z = ~zinput,
color = ~scat_col,
colors = c('gray', "firebrick", "darkorange", "gold", "forestgreen")) %>%
add_trace(type = 'mesh3d',
data = df_mesh_1,
x = ~X_VAL,
y = ~Y_VAL,
z = ~Z_VAL,
i = c(7, 1,  6, 0, 4, 0, 3, 6, 0, 3, 4,7),
j = c(3, 5,  4, 2, 0, 1, 6, 3, 1, 2, 5,6),
k = c(1, 7, 0, 6, 5, 5, 7, 2, 3, 0, 7, 4),
facecolor = rep("blue", 12),
opacity = 0.1,
name = "A+/T+/N+ Positive Area",
showlegend = T) %>%
layout(legend = LEGEND_1,
scene = list(xaxis = xax, yaxis = yax, zaxis = zax))
plot_produced
}
x <- CubeVisualisation(dat = simulated.data,
xinput = simulated.data$CSF.AB42.INNO,
yinput = simulated.data$CSF.pTau.INNO,
zinput = simulated.data$CSF.tTau.INNO,
cols = simulated.data$Burnham_class,
leg = LEGEND_1,
xax = axx,
yax = axy,
zax = axz,
XCUT = 656,
YCUT = 86,
ZCUT = 303.65)
warnings()
CubeVisualisation<- function(dat, xinput,yinput,zinput,cols,leg,xax,yax,zax,
XCUT,YCUT,ZCUT){
df7 <- mutate(dat, scat_col = ifelse(yinput >YCUT & zinput > ZCUT & xinput <XCUT & Burnham_class == "AD",
"selected - AD",
ifelse(yinput >YCUT & zinput >ZCUT & xinput < XCUT & Burnham_class == "Pathological Change",
"selected - Pathological Change",
ifelse(yinput >YCUT & zinput > ZCUT & xinput < XCUT & Burnham_class == "Non-AD pathological Change",
"selected - Non-AD pathological Change",
ifelse(yinput >YCUT & zinput > ZCUT & xinput < XCUT & Burnham_class == "Normal AD Biomarkers",
"selected - Normal AD Biomarker","unselected")))))
df7$scat_col <- factor(df7$scat_col, levels = c("unselected", "selected - AD",
"selected - Pathological Change",
"selected - Non-AD pathological Change",
"selected - Normal AD Biomarker"))
df_mesh_1 <- data.frame(X_VAL = c(XCUT,  XCUT,  min(df7$xinput, na.rm = T),    min(df7$xinput, na.rm = T),
XCUT,   XCUT,   min(df7$xinput, na.rm = T),   min(df7$xinput, na.rm = T)),
Y_VAL = c(YCUT,max(df7$yinput, na.rm = T),    YCUT,  max(df7$yinput, na.rm = T),
YCUT, max(df7$yinput, na.rm = T),   YCUT, max(df7$yinput, na.rm = T)),
Z_VAL = c(ZCUT, ZCUT, ZCUT, ZCUT, max(df7$zinput, na.rm = T),
max(df7$zinput, na.rm = T),  max(df7$zinput, na.rm = T),  max(df7$zinput, na.rm = T)),
MESH_COL = factor(rep("CUBE", 8), levels = c("CUBE")))
plot_produced <- plot_ly()%>%
add_markers(type = "scatter3d",
mode = "markers",
data = df7,
x = ~xinput,
y = ~yinput,
z = ~zinput,
color = ~scat_col,
colors = c('gray', "firebrick", "darkorange", "gold", "forestgreen")) %>%
add_trace(type = 'mesh3d',
data = df_mesh_1,
x = ~X_VAL,
y = ~Y_VAL,
z = ~Z_VAL,
i = c(7, 1,  6, 0, 4, 0, 3, 6, 0, 3, 4,7),
j = c(3, 5,  4, 2, 0, 1, 6, 3, 1, 2, 5,6),
k = c(1, 7, 0, 6, 5, 5, 7, 2, 3, 0, 7, 4),
facecolor = rep("blue", 12),
opacity = 0.1,
name = "A+/T+/N+ Positive Area",
showlegend = T) %>%
layout(legend = LEGEND_1,
scene = list(xaxis = xax, yaxis = yax, zaxis = zax))
plot_produced
}
x <- CubeVisualisation(dat = simulated.data,
xinput = simulated.data$CSF.AB42.INNO,
yinput = simulated.data$CSF.pTau.INNO,
zinput = simulated.data$CSF.tTau.INNO,
cols = simulated.data$Burnham_class,
leg = LEGEND_1,
xax = axx,
yax = axy,
zax = axz,
XCUT = 656,
YCUT = 86,
ZCUT = 303.65)
warnings()
dat = simulated.data,
xinput = simulated.data$CSF.AB42.INNO,
yinput = simulated.data$CSF.pTau.INNO,
zinput = simulated.data$CSF.tTau.INNO,
cols = simulated.data$Burnham_class,
leg = LEGEND_1,
xax = axx,
yax = axy,
zax = axz,
XCUT = 656,
YCUT = 86,
ZCUT = 303.65
dat = simulated.data
xinput = simulated.data$CSF.AB42.INNO
yinput = simulated.data$CSF.pTau.INNO
zinput = simulated.data$CSF.tTau.INNO
cols = simulated.data$Burnham_class
leg = LEGEND_1
xax = axx
yax = axy
zax = axz
XCUT = 656
YCUT = 86
ZCUT = 303.65
df7 <- mutate(dat, scat_col = ifelse(yinput >YCUT & zinput > ZCUT & xinput <XCUT & Burnham_class == "AD",
"selected - AD",
ifelse(yinput >YCUT & zinput >ZCUT & xinput < XCUT & Burnham_class == "Pathological Change",
"selected - Pathological Change",
ifelse(yinput >YCUT & zinput > ZCUT & xinput < XCUT & Burnham_class == "Non-AD pathological Change",
"selected - Non-AD pathological Change",
ifelse(yinput >YCUT & zinput > ZCUT & xinput < XCUT & Burnham_class == "Normal AD Biomarkers",
"selected - Normal AD Biomarker","unselected")))))
df7
df7$scat_col <- factor(df7$scat_col, levels = c("unselected", "selected - AD",
"selected - Pathological Change",
"selected - Non-AD pathological Change",
"selected - Normal AD Biomarker"))
df_mesh_1 <- data.frame(X_VAL = c(XCUT,  XCUT,  min(df7$xinput, na.rm = T),    min(df7$xinput, na.rm = T),
XCUT,   XCUT,   min(df7$xinput, na.rm = T),   min(df7$xinput, na.rm = T)),
Y_VAL = c(YCUT,max(df7$yinput, na.rm = T),    YCUT,  max(df7$yinput, na.rm = T),
YCUT, max(df7$yinput, na.rm = T),   YCUT, max(df7$yinput, na.rm = T)),
Z_VAL = c(ZCUT, ZCUT, ZCUT, ZCUT, max(df7$zinput, na.rm = T),
max(df7$zinput, na.rm = T),  max(df7$zinput, na.rm = T),  max(df7$zinput, na.rm = T)),
MESH_COL = factor(rep("CUBE", 8), levels = c("CUBE")))
df7 <- mutate(dat, scat_col = ifelse(yinput >YCUT & zinput > ZCUT & xinput <XCUT & Burnham_class == "AD",
"selected - AD",
ifelse(yinput >YCUT & zinput >ZCUT & xinput < XCUT & Burnham_class == "Pathological Change",
"selected - Pathological Change",
ifelse(yinput >YCUT & zinput > ZCUT & xinput < XCUT & Burnham_class == "Non-AD pathological Change",
"selected - Non-AD pathological Change",
ifelse(yinput >YCUT & zinput > ZCUT & xinput < XCUT & Burnham_class == "Normal AD Biomarkers",
"selected - Normal AD Biomarker","unselected")))))
df7$scat_col <- factor(df7$scat_col, levels = c("unselected", "selected - AD",
"selected - Pathological Change",
"selected - Non-AD pathological Change",
"selected - Normal AD Biomarker"))
df_mesh_1 <- data.frame(X_VAL = c(XCUT,  XCUT,  min(df7$CSF.AB42.INNO, na.rm = T),    min(df7$CSF.AB42.INNO, na.rm = T),
XCUT,   XCUT,   min(df7$CSF.AB42.INNO, na.rm = T),   min(df7$CSF.AB42.INNO, na.rm = T)),
Y_VAL = c(YCUT,max(df7$CSF.pTau.INNO, na.rm = T),    YCUT,  max(df7$CSF.pTau.INNO, na.rm = T),
YCUT, max(df7$CSF.pTau.INNO, na.rm = T),   YCUT, max(df7$CSF.pTau.INNO, na.rm = T)),
Z_VAL = c(ZCUT, ZCUT, ZCUT, ZCUT, max(df7$CSF.tTau.INNO, na.rm = T),
max(df7$CSF.tTau.INNO, na.rm = T),
max(df7$CSF.tTau.INNO, na.rm = T),  max(df7$CSF.tTau.INNO, na.rm = T)),
MESH_COL = factor(rep("CUBE", 8), levels = c("CUBE")))
plot_produced <- plot_ly()%>%
add_markers(type = "scatter3d",
mode = "markers",
data = df7,
x = ~xinput,
y = ~yinput,
z = ~zinput,
color = ~scat_col,
colors = c('gray', "firebrick", "darkorange", "gold", "forestgreen")) %>%
add_trace(type = 'mesh3d',
data = df_mesh_1,
x = ~X_VAL,
y = ~Y_VAL,
z = ~Z_VAL,
i = c(7, 1,  6, 0, 4, 0, 3, 6, 0, 3, 4,7),
j = c(3, 5,  4, 2, 0, 1, 6, 3, 1, 2, 5,6),
k = c(1, 7, 0, 6, 5, 5, 7, 2, 3, 0, 7, 4),
facecolor = rep("blue", 12),
opacity = 0.1,
name = "A+/T+/N+ Positive Area",
showlegend = T) %>%
layout(legend = LEGEND_1,
scene = list(xaxis = xax, yaxis = yax, zaxis = zax))
plot_produced
load("simulated_data.RData")
LEGEND_1 <- list(
title = list(text = "<b>ATN Burnham Classification</b>"),
font = list(
family = "sans-serif",
size = 12,
color = "#000"),
bgcolor = "#E2E2E2",
bordercolor = "black",
borderwidth = 1.25,
x = 1,
y = 0.5)
LEGEND_2 <- list(
title = list(text = "<b>ATN Clifford Classification</b>"),
font = list(
family = "sans-serif",
size = 12,
color = "#000"),
bgcolor = "#E2E2E2",
bordercolor = "black",
borderwidth = 1.25,
x = 1,
y = 0.5)
################# GROUP 1 LABELS ###############
axx <- list(
title = "CSF AB1-42 pg/mL"
)
axy <- list(
title = "CSF p-Tau pg/mL"
)
axz <- list(
title = "CSF t-Tau pg/mL"
)
################# GROUP 2 LABELS ###############
axx2 <- list(
title = "Hippocampus mL<sup>3</sup>"
)
axy2 <- list(
title = "CSF p-Tau pg/mL"
)
axz2 <- list(
title = "Centiloid"
)
G1CubeVisualisation<- function(dat, xinput,yinput,zinput,cols,leg,xax,yax,zax,
XCUT,YCUT,ZCUT){
df7 <- mutate(dat, scat_col = ifelse(yinput >YCUT & zinput > ZCUT & xinput <XCUT & Burnham_class == "AD",
"selected - AD",
ifelse(yinput >YCUT & zinput >ZCUT & xinput < XCUT & Burnham_class == "Pathological Change",
"selected - Pathological Change",
ifelse(yinput >YCUT & zinput > ZCUT & xinput < XCUT & Burnham_class == "Non-AD pathological Change",
"selected - Non-AD pathological Change",
ifelse(yinput >YCUT & zinput > ZCUT & xinput < XCUT & Burnham_class == "Normal AD Biomarkers",
"selected - Normal AD Biomarker","unselected")))))
df7$scat_col <- factor(df7$scat_col, levels = c("unselected", "selected - AD",
"selected - Pathological Change",
"selected - Non-AD pathological Change",
"selected - Normal AD Biomarker"))
df_mesh_1 <- data.frame(X_VAL = c(XCUT,  XCUT,  min(xinput, na.rm = T),    min(xinput, na.rm = T),
XCUT,   XCUT,   min(xinput, na.rm = T),   min(xinput, na.rm = T)),
Y_VAL = c(YCUT,max(yinput, na.rm = T),    YCUT,  max(yinput, na.rm = T),
YCUT, max(yinput, na.rm = T),   YCUT, max(yinput, na.rm = T)),
Z_VAL = c(ZCUT, ZCUT, ZCUT, ZCUT, max(zinput, na.rm = T),
max(zinput, na.rm = T),
max(zinput, na.rm = T),  max(zinput, na.rm = T)),
MESH_COL = factor(rep("CUBE", 8), levels = c("CUBE")))
plot_produced <- plot_ly()%>%
add_markers(type = "scatter3d",
mode = "markers",
data = df7,
x = ~xinput,
y = ~yinput,
z = ~zinput,
color = ~scat_col,
colors = c('gray', "firebrick", "darkorange", "gold", "forestgreen")) %>%
add_trace(type = 'mesh3d',
data = df_mesh_1,
x = ~X_VAL,
y = ~Y_VAL,
z = ~Z_VAL,
i = c(7, 1,  6, 0, 4, 0, 3, 6, 0, 3, 4,7),
j = c(3, 5,  4, 2, 0, 1, 6, 3, 1, 2, 5,6),
k = c(1, 7, 0, 6, 5, 5, 7, 2, 3, 0, 7, 4),
facecolor = rep("blue", 12),
opacity = 0.1,
name = "A+/T+/N+ Positive Area",
showlegend = T) %>%
layout(legend = LEGEND_1,
scene = list(xaxis = xax, yaxis = yax, zaxis = zax))
plot_produced
}
x <- CubeVisualisation(dat = simulated.data,
xinput = simulated.data$CSF.AB42.INNO,
yinput = simulated.data$CSF.pTau.INNO,
zinput = simulated.data$CSF.tTau.INNO,
cols = simulated.data$Burnham_class,
leg = LEGEND_1,
xax = axx,
yax = axy,
zax = axz,
XCUT = 656,
YCUT = 86,
ZCUT = 303.65)
x <- G1CubeVisualisation(dat = simulated.data,
xinput = simulated.data$CSF.AB42.INNO,
yinput = simulated.data$CSF.pTau.INNO,
zinput = simulated.data$CSF.tTau.INNO,
cols = simulated.data$Burnham_class,
leg = LEGEND_1,
xax = axx,
yax = axy,
zax = axz,
XCUT = 656,
YCUT = 86,
ZCUT = 303.65)
library(shiny)
library(reshape2)
library(dplyr)
library(ggplot2)
library(visdat)
library(plotly)
library(shinydashboard)
library(shinyWidgets)
library(shinyjs)
library(shinyalert)
library(shinycssloaders)
library(data.table)
library(gridExtra)
library(networkD3)
library(shinydashboard) # for dashboard related functions and features
library(shinyBS)
library(htmlTable)
library(htmlwidgets)
library(shinymanager)
library(shinydisconnect)
x <- G1CubeVisualisation(dat = simulated.data,
xinput = simulated.data$CSF.AB42.INNO,
yinput = simulated.data$CSF.pTau.INNO,
zinput = simulated.data$CSF.tTau.INNO,
cols = simulated.data$Burnham_class,
leg = LEGEND_1,
xax = axx,
yax = axy,
zax = axz,
XCUT = 656,
YCUT = 86,
ZCUT = 303.65)
x
